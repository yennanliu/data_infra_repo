Apache Spark is a cluster computing platform designed to be fast and general-
purpose.
On the speed side, Spark extends the popular MapReduce model to efficiently sup‐
port more types of computations, including interactive queries and stream process‐
ing. Speed is important in processing large datasets, as it means the difference
between exploring data interactively and waiting minutes or hours. One of the main
features Spark offers for speed is the ability to run computations in memory, but the
system is also more efficient than MapReduce for complex applications running on
disk.
On the generality side, Spark is designed to cover a wide range of workloads that pre‐
viously required separate distributed systems, including batch applications, iterative
algorithms, interactive queries, and streaming. By supporting these workloads in the
same engine, Spark makes it easy and inexpensive to combine different processing
types, which is often necessary in production data analysis pipelines. In addition, it
reduces the management burden of maintaining separate tools.
Spark is designed to be highly accessible, offering simple APIs in Python, Java, Scala,
and SQL, and rich built-in libraries. It also integrates closely with other Big Data
tools. In particular, Spark can run in Hadoop clusters and access any Hadoop data
source, including Cassandra.
A Unified Stack
The Spark project contains multiple closely integrated components. At its core, Spark
is a “computational engine” that is responsible for scheduling, distributing, and mon‐
itoring applications consisting of many computational tasks across many worker
machines, or a computing cluster. Because the core engine of Spark is both fast and
general-purpose, it powers multiple higher-level components specialized for various
workloads, such as SQL or machine learning. These components are designed to
interoperate closely, letting you combine them like libraries in a software project.
A philosophy of tight integration has several benefits. First, all libraries and higher-
level components in the stack benefit from improvements at the lower layers. For
example, when Spark’s core engine adds an optimization, SQL and machine learning
libraries automatically speed up as well. Second, the costs associated with running the
stack are minimized, because instead of running 5–10 independent software systems,
an organization needs to run only one. These costs include deployment, mainte‐
nance, testing, support, and others. This also means that each time a new component
is added to the Spark stack, every organization that uses Spark will immediately be
able to try this new component. This changes the cost of trying out a new type of data
analysis from downloading, deploying, and learning a new software project to
upgrading Spark.
Finally, one of the largest advantages of tight integration is the ability to build appli‐
cations that seamlessly combine different processing models. For example, in Spark
you can write one application that uses machine learning to classify data in real time
as it is ingested from streaming sources. Simultaneously, analysts can query the
resulting data, also in real time, via SQL (e.g., to join the data with unstructured log‐
files). In addition, more sophisticated data engineers and data scientists can access
the same data via the Python shell for ad hoc analysis. Others might access the data in
standalone batch applications. All the while, the IT team has to maintain only one
system.
